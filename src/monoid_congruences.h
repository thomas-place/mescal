/**
 * @file monoid_congruences.h
 * @brief
 * Computations of congruences on monoids. Deterministic hierarchies.
 */


#ifndef CONGRUENCES_H
#define CONGRUENCES_H

#include <stdbool.h>
#include <stdlib.h>
#include "type_dlist.h"
#include "sep_group.h"
#include "nfa.h"
#include "nfa_intersec.h"
#include "monoid.h"
#include "monoid_ideals.h"
#include "monoid_props.h"

 /******************************/
 /* Computation of congruences */
 /******************************/

/**
 * @brief
 * Computation of the least congruence that contains a given partition.
 *
 * @remark
 * The partition is given a a union-find partition which is made into the congruence by
 * the function.
 */
void compute_leastcong(morphism*, //!< The morphism.
    ufind*                     //!< The union-find partition.
);

/**
 * @brief
 * Computes the least congruence containing one of the four Green relations.
 *
 * @return
 * The congruence given as a union-find partition.
 */
ufind* iden_green_mono(morphism*, //!< The morphism.
    green_relation //!< The Green relation.
);

/**
 * @brief
 * Computes the least congruence which identifies all elements equivalent for a given Green relation
 * inside the subsemigroup given as input.
 *
 * @return
 * The congruence given as a union-find partition.
 */
ufind* iden_green_subsemi(subsemi*, //!< The subsemigroup.
    green_relation //!< The relation to be identified.
);

/**
 * @brief
 * Computes the least congruence which identifies all elements equivalent for a given Green relation
 * inside the orbits given as input.
 *
 * @return
 * The congruence given as a union-find partition.
 */
ufind* iden_green_orbmono(orbits*, //!< The orbits.
    green_relation //!< The relation to be identified.
);

/***************************************/
/* Partitions generated by an equation */
/***************************************/

/**
 * @brief
 * Returns the least congruence satisfying the BPol(MOD) equation.
 *
 * @return
 * The congruence given as a union-find partition.
 */
ufind* iden_bpolmod_mono(morphism* //!< The morphism.
);


/**
 * @brief
 * Returns the least congruence satisfying the BPol(AMT) equation.
 *
 * @return
 * The congruence given as a union-find partition.
 */
ufind* iden_bpolamt_mono(morphism* //!< The morphism.
);


/**
 * @brief
 * Returns the least congruence satisfying the BPol(GR) equation (Block group).
 *
 * @return
 * The congruence given as a union-find partition.
 */
ufind* iden_blockg_mono(morphism* //!< The morphism.
);

/**
 * @brief
 * Returns the least congruence satisfying the BPol(DD) equation (Knast).
 *
 * @return
 * The congruence given as a union-find partition.
 */
ufind* iden_knast_mono(orbits* //!< The DD-orbits.
);



/**
 * @brief
 * Returns the least congruence satisfying the BPol(MOD⁺) equation (Knast on the MOD-Kernel).
 *
 * @return
 * The congruence given as a union-find partition.
 */
ufind* iden_qknast_mono(orbits*, //!< The MOD⁺-orbits
    subsemi*                //!< The MOD-kernel.
);

/**
 * @brief
 * Returns the least congruence satisfying the BPol(AMT⁺) equation.
 *
 * @return
 * The congruence given as a union-find partition.
 */
ufind* iden_bpolamtp_mono(orbits* //!< The AMT⁺-orbits.
);

/**
 * @brief
 * Returns the least congruence satisfying the BPol(GR⁺) equation.
 *
 * @return
 * The congruence given as a union-find partition.
 */
ufind* iden_bpolgrp_mono(orbits* //!< The GR⁺-orbits.
);


/**
 * @brief
 * Returns the equivalence obtained by identifying the elements which should be equal according to the
 * MPol(C)-equation. Takes the canonical C-congruence as input.
 *
 * @remark
 * Should be combined with the function "compute_leastcong" to compute the canonical MPol(C)-congruence
 * of the morphism.
 *
 * @return
 * The equivalence given as a union-find partition.
 */
ufind* iden_mpolc_mono(morphism*, //!< The morphism.
    parti*                     //!< The canonical C-congruence.
);

/**
 * @brief
 * Returns the equivalence obtained by identifying the elements which should be equal according to the
 * LPol(C)-equation. Takes the canonical C-congruence as input.
 *
 * @remark
 * Should be combined with the function "compute_leastcong" to compute the canonical LPol(C)-congruence
 * of the morphism.
 *
 * @return
 * The equivalence given as a union-find partition.
 */
ufind* iden_lpolc_mono(morphism*, //!< The morphism.
    parti*                     //!< The canonical C-congruence.
);

/**
 * @brief
 * Returns the equivalence obtained by identifying the elements which should be equal according to the
 * RPol(C)-equation. Takes the canonical C-congruence as input.
 *
 * @remark
 * Should be combined with the function "compute_leastcong" to compute the canonical RPol(C)-congruence
 * of the morphism.
 *
 * @return
 * The equivalence given as a union-find partition.
 */
ufind* iden_rpolc_mono(morphism*, //!< The morphism.
    parti*                     //!< The canonical C-congruence.
);



/**
 * @brief
 * Computes the levels of a syntactic morphism in the LPol(C) and the RPol(C)-hierarchies: RPol(C),LPol(C) = 1, RPol₂(C),LPol₂(C) = 2...
 *
 * @remark
 * Details of the computation can be displayed on an input stream. It should be set to NULL if
 * no details are desired.
 *
 * @attention
 * The levels are returned using pointers
 */
void hdet_lrpol_level(morphism*, //!< The morphism.
    ufind*,                 //!< The canonical C-congruence.
    FILE*,                   //!< The stream.
    short*,                  //!< Pointer used to return the level in the LPol hierarchy.
    short*                    //!< Pointer used to return the level in the RPol hierarchy.
);

#endif
