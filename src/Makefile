# CC=gcc or clang or gcc-14 (on OSX)
CC=gcc

# If a scanner+parser is needed.
LEX=flex
YACC=bison
YFLAGS=-d -v -t # -Wcounterexamples

# Math, big numbers
LDLIBS=-ll  -lreadline -lm -lgmp

# The DEBUG_LEVEL (OFF, CRITICAL, ERROR, WARNING, INFO, TRACE)
# is set by default to WARNING in macros_error.h.
# To set it on the command line, force compilation and set it.
# Example: make -B CFLAGS="-DDEBUG_LEVEL=INFO" to see all debug messages
# above the 'INFO' level.

# clang 14.0.3 does implement the C23 feature __VA_OPTS__ but issues a spurious
# warning. The -Wno-gnu-zero-variadic-macro-arguments disables this warning.
# This flag is ignored by gcc (which implements __VA_OPTS__ without any warning).

# For MacOS (assuming recent homebrew)
ifeq ($(shell uname -s), Darwin)
override CFLAGS += -std=gnu2x -MMD -Wall -pedantic -Wextra -Wshadow -Wpointer-arith	\
-Wcast-qual -Wstrict-prototypes -Wmissing-prototypes -Wno-gnu-zero-variadic-macro-arguments
	CPPFLAGS += -I/opt/homebrew/include -I/opt/homebrew/include/flint -I/opt/homebrew/include/json-c -I/opt/homebrew/opt/readline/include
	LDFLAGS += -L/opt/homebrew/lib -L/opt/homebrew/lib -Wl,-stack_size -Wl,0x10000000
endif

ifeq ($(shell uname -s), Linux)
override CFLAGS += -std=gnu2x -MMD -Wall -pedantic -Wextra -Wshadow -Wpointer-arith	\
-Wcast-qual -Wstrict-prototypes -Wmissing-prototypes -D_GNU_SOURCE \
-Wno-comment -fsplit-stack
	CPPFLAGS += -I/usr/include -I/opt/homebrew/include/flint -I/usr/include/json-c
	LDFLAGS += -Wl,-z,stack-size=268435456
endif


LDLIBS += $(shell sdl2-config --libs)
LDLIBS += -ljson-c -lflint
LDFLAGS += $(shell sdl2-config --cflags) -L/opt/homebrew/opt/readline/lib

SOURCES := $(wildcard *.c)
OBJECTS := $(SOURCES:%.c=%.o)
DEPS := $(SOURCES:%.c=%.d)

# Compilation in debug mode by default, to use gdb and valgrind. Warnings produce an error.
all: CFLAGS += -O3 # -Werror
all: mescal

# Once the program works, optimized mode (and no error in case of warning).
debug: CFLAGS += -g -O0
debug: mescal

# Add parser.o scan.o if bison/flex interface.
mescal: $(OBJECTS) parser.tab.o scan.o parse_regexp.tab.o scan_regexp.o $(OBJECTS)
	$(CC) -o $@ $(LDFLAGS) $(CFLAGS) $^ $(LDLIBS)

parse_regexp.tab.c: parse_regexp.y parse_regexp.h
	$(YACC) $(YFLAGS) --name-prefix regexp_ parse_regexp.y

parser.tab.c parser.tab.h: parser.y parser.h
	$(YACC) $(YFLAGS) --name-prefix shell_ parser.y

scan_regexp.c: scan_regexp.l parse_regexp.tab.c
	flex -t --prefix regexp_ scan_regexp.l > scan_regexp.c

scan.c: scan.l
	flex -t --prefix shell_ scan.l > scan.c

# Include dependancies generated by gcc -MMD.
-include $(DEPS)

# Clean all.
.PHONY: clean
clean:
	rm -rf mescal *.tab.* *.o *.d TAGS core *.output lex.yy.c scan_regexp.c scan_regexp.c scan.c Documentation /tmp/nfa-*

# Generate documentation (and fix typo generated by doxygen)
doc:
	doxygen Doxyfile
	sed -i .bak "s/Variables globale\([^s]\)/Liste des symboles\1/g" Documentation/html/navtreedata.js
	cd ./Documentation/latex && make

html:
	doxygen Doxyfile
	sed -i .bak "s/Variables globale\([^s]\)/Liste des symboles\1/g" Documentation/html/navtreedata.js
